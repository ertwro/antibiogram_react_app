#!/usr/bin/env node
// Generate dynamic import index for JSON files
// This eliminates runtime fetch() and browser caching issues

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const sourceDir = path.join(__dirname, '..', 'parsed_references', 'bacteria_json', 'enterobacterales');
const outputFile = path.join(__dirname, '..', 'src', 'data', 'generatedBacteriaIndex.js');

console.log('🏗️  Generating bacteria import index...\n');

if (!fs.existsSync(sourceDir)) {
    console.error('❌ Source directory not found:', sourceDir);
    process.exit(1);
}

const jsonFiles = fs.readdirSync(sourceDir).filter(file => file.endsWith('.json'));

if (jsonFiles.length === 0) {
    console.error('❌ No JSON files found in source directory');
    process.exit(1);
}

// Generate import statements and export object
const imports = [];
const exports = [];

jsonFiles.forEach((filename, index) => {
    const varName = `organism${index}`;
    const filePath = `../../parsed_references/bacteria_json/enterobacterales/${filename}`;
    
    imports.push(`import ${varName} from '${filePath}' assert { type: 'json' };`);
    
    // Generate a consistent key from the filename
    const key = filename.replace('.json', '')
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, '') // Remove special characters
        .replace(/\s+/g, '_') // Replace spaces with underscores
        .replace(/_{2,}/g, '_') // Replace multiple underscores with single
        .replace(/^_|_$/g, ''); // Remove leading/trailing underscores
    
    exports.push(`  '${key}': ${varName}`);
});

const fileContent = `// Auto-generated bacteria database index
// This file is automatically generated - do not edit manually
// Run 'npm run generate-imports' to regenerate

${imports.join('\n')}

// Export all organisms with consistent keys
export const bacteriaDatabase = {
${exports.join(',\n')}
};

// Generate keys from bacterium names dynamically
const generateBacteriumKey = (bacteriumName) => {
    return bacteriumName
        .toLowerCase()
        .replace(/[^a-z0-9\\s]/g, '') // Remove special characters
        .replace(/\\s+/g, '_') // Replace spaces with underscores
        .replace(/_{2,}/g, '_') // Replace multiple underscores with single
        .replace(/^_|_$/g, ''); // Remove leading/trailing underscores
};

// Create name-based index for dynamic lookup
export const bacteriaByName = {};
Object.values(bacteriaDatabase).forEach(organism => {
    if (organism.identity?.bacteriumName) {
        const key = generateBacteriumKey(organism.identity.bacteriumName);
        bacteriaByName[key] = organism;
    }
});

export const getBacteriaCount = () => Object.keys(bacteriaDatabase).length;
export const getBacteriaList = () => Object.values(bacteriaDatabase);
export const getBacteriumByKey = (key) => bacteriaDatabase[key] || bacteriaByName[key];

console.log('📊 Loaded', getBacteriaCount(), 'Enterobacterales organisms');
`;

// Write the generated file
fs.writeFileSync(outputFile, fileContent, 'utf8');

console.log(`✅ Generated import index: ${outputFile}`);
console.log(`📄 Imported ${jsonFiles.length} organisms:`);
jsonFiles.forEach((filename, index) => {
    console.log(`   ${index + 1}. ${filename}`);
});

console.log('\n🎉 Import index generation complete!');
console.log('\n💡 Next steps:');
console.log('1. Update microbiologyData.js to use the generated index');
console.log('2. Remove runtime fetch() calls');
console.log('3. Remove manual copy scripts');